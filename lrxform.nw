\section{Transforming the grammar to LR(1) form}
The idea is to put every right-hand side into the normal form
[[Alt({Cat({string})})]].
<<*>>=
global lrcons, lrnil, lrsome, lrnone
procedure lrxform(g, emitter)
  work := []
  every lhs := !g.ntlist do
    every put(work, lhs | g.nonterms[lhs])
  g.ntlist := []
  while lrxpair(g, work, get(work), get(work), emitter)
  return g
end
<<*>>=
procedure lrxpair(g, work, lhs, node, emitter)
  static epsilon
  initial { epsilon := Cat([]) }
  put(g.ntlist, lhs)
  return g.nonterms[lhs] := lrxalt(g, work, lhs, node, emitter)
end

procedure lrxalt(g, work, lhs, node, emitter)   # produce Alt-Cat-string
  static missing, empty, append, some # OK since emitter never changes
  initial { 
     missing := Cat([], [emitter("none")])
     empty   := Cat([], [emitter("nil")]) 
     append := emitter("append")
     some := emitter("some")
  }
  return case type(node) of {
    "Opt"    : {
       n := lrxcat(g, work, lhs, node.node) # Cat-string
       n.semantics := some(\n.semantics, n)
       Alt([n, missing])
    }
    "Clo"    : lrxalt(g, work, lhs, Alt([Cat([lhs, node.node],[append("ii1", "ii2")]), 
                                         empty]))
    "Cat"    | 
    "string" : lrxalt(g, work, lhs, Alt([node]))
    "Alt"    : { every n := node.list[i := 1 to *node.list] do
                   node.list[i] := lrxcat(g, work, lhs, n) 
                 node
               }
    default  : error("impossible node type")
  }
  return
end

procedure lrxcat(g, work, lhs, node)   # produce Cat-string
  return case type(node) of {
    "Opt" | "Clo" | "Alt" : lrxcat(g, work, lhs, cutnode(g, work, lhs, node))
    "string" : lrxcat(g, work, lhs, Cat([node],["ii1"]))
    "Cat"    : { every n := node.list[i := 1 to *node.list] & type(n) ~== "string" do
                   node.list[i] := cutnode(g, work, lhs, n) 
                 node
               }
    default  : error("impossible node type")
  }
  return
end
