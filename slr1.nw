\section{SLR(1) parser construction}
<<*>>=
global accept, epsilon, epsilonset, endmarker

record item(nt, dotpos, cat, uniqueid)

<<*>>=
procedure slr1(g, argv, emit)
  epsilon     := " %Epsilon% "
  endmarker   := "end of file"
  epsilonset  := set([epsilon])
  accept      := " %Accept% "
  g.nonterms[accept] := Cat([g.start, endmarker])		# augment re. p110
  put(g.ntlist, accept)
  g.terms[endmarker] := g.endsyntax
  ostart := g.start
  g.start := accept
  checkgrammar(g)
  compute_first(g)
  compute_follow(g)
  g.start := ostart
  pushtrace("LALR")
  I0 := set([newitem(accept, 1, g.nonterms[accept])])
  newitemset(closure(g, I0))
  extend(g)
  lrdiag(f := if !argv == "-d" then open("i.output", "w"), g) & close(f)
#  every p := !sort(itemtab) do write(p[1], ": ", itemimage(p[2]))
  every write(!g.preamble)
  resetconflicts()
  emit(g)
  summarizeconflicts(&errout, g)
  every write(!g.postamble)
  poptrace()
end
@
\subsection{Construction of item sets}
<<*>>=
link pushtrace
procedure closure(g, items)
  local closed
  l := sort(items)
  closed := set()
  while i := get(l) do 
    if not member(closed, i) then {
      insert(closed, i)
      every cat := genrhs(g, i.cat.list[i.dotpos]) do
        put(l, newitem(i.cat.list[i.dotpos], 1, cat))
    }
  return closed
end
<<*>>=
procedure genrhs(g, lhs)
  static missing, empty
  initial {missing := Cat([], "&null"); empty := Cat([], "[]") }
  case type(node := \g.nonterms[lhs]) of { 
    "Alt"    : suspend !node.list
    "Cat"    : suspend node
    "Opt"    : &null[0] & suspend genrhs(g, node.node) | missing
    "Clo"    : &null[0] & suspend Cat([lhs, node.node], ["put(ii1, ii2)"]) | empty
    "string" : suspend Cat([node], ["ii1"])
    default  : error("impossible -- bad format for grammar, found node ", image(node))
  }
end
<<*>>=
procedure itemimage(it)
  l := ["[", it.nt,"->"] ||| it.cat.list[1:it.dotpos] ||| ["."] ||| 
                             it.cat.list[it.dotpos:0] ||| ["]"]
  <<add precedence from [[it]] to [[l]] if needed>>
  return commaseparate(l, " ")
end
<<add precedence from [[it]] to [[l]] if needed>>=
lp := &null
any('"\'', lp := string(it.cat.list[*it.cat.list to 1 by -1]))
/lp := it.cat.precterm
put(l, "(%prec " || (\lp ~== \it.cat.precterm) || ")")
<<*>>=
procedure itemsetimage(s)
  l := []
  every put(l, (!s).uniqueid)
  return commaseparate(sort(l), " ")
end
<<*>>=
procedure addsym(g, Vg, X)
  l := []
  every i := !Vg & i.cat.list[i.dotpos] == X do 
    put(l, newitem(i.nt, i.dotpos+1, i.cat))
  return closure(g, l)
end
<<*>>=
global itemtab

procedure newitem(nt, dotpos, cat)
  static cache, uid
  initial { cache := table() ; uid := create(seq()); itemtab := table() }
  s := nt || " " || image(cat) || " " || dotpos
  if /cache[s] := item(nt, dotpos, cat, n := @uid) then
    itemtab[n] := cache[s]
  return cache[s]
end
<<*>>=
global itemsets		# table with keys strings, values item sets
global itemsetnos
global itemsetlist

procedure newitemset(s)
  local im
  initial { every itemsets | itemsetnos := table() ; itemsetlist := []}
  (/itemsets[im := itemsetimage(s)] := s, 
   itemsetnos[s] := *itemsets, 
   put(itemsetlist, s)) & if *itemsets % 15 = 0 then writes(&errout, ".")
  return itemsets[im]
end
<<*>>=
global goto, gotodefault


procedure addgoto(I, X, Iprime)
  if goto[I] === gotodefault then  
    goto[I] := table()
  goto[I][X] := Iprime
  return
end

procedure extend(g)
  initial goto := table(gotodefault := table())
  i := 1
  writes(&errout, "Computing LR(0) items...")
  while i <= *itemsetlist do {
    every it := !(I := itemsetlist[i]) & X := it.cat.list[it.dotpos] do
      addgoto(I, X, newitemset(addsym(g, I, X)))
    i +:= 1
  }
  write(&errout, " done")
end  
@
\subsection{Constructing the parsing action and goto tables}
<<*>>=
procedure actions(g, I, logconflict)
  t := table()
  <<let [[n]] be the number of completed items in [[I]]>>
  every it := !I do
    if member(g.terms, a := it.cat.list[it.dotpos]) then {
      addaction(g, t, a, [it, "shift", goto[I][a]], logconflict)
    } else if it.dotpos = *it.cat.list + 1 then {
      if it.nt == accept then
        addaction(g, t, endmarker, [it, "accept"], logconflict)
      else # try optimization
        if n > 1 then
          A := [it, "reduce", it] & every addaction(g, t, !follow[it.nt], A, logconflict)
        else # optimize
          addaction(g, t, 0, [it, "reduce", it], logconflict)
  }
  if A := \t[0] then # detect possible conflict with reduction
    every \t[term := !follow[A[3].nt]] do
      addaction(g, t, term, A, logconflict)
  else  
    t[0] := [&null, "error", expectedtokens(t, g, I)]
  return t
end
<<let [[n]] be the number of completed items in [[I]]>>=
n := 0
every it := !I & it.dotpos = *it.cat.list + 1 do n +:= 1
<<*>>=
procedure sameaction(a1, a2)
  return case a1[2] == a2[2] of {
    "shift"  | "reduce" : a1[3] === a2[3]
    "accept" | "error"  : a1
  }
end
<<*>>=
procedure addaction(g, t, term, action, logconflict)
  local sprec, rprec
  savereduce(case action[2] of {
    "reduce" : action[3]
    "accept" : action[1]
  })
  (/t[term] := action) | sameaction(t[term], action) | {
    s := (a := t[term] | action, a[2] == "shift", a)
    r := (a := t[term] | action, a[2] == "reduce", a)
    <<if possible, disambiguate [[s]] and [[r]] and return>>
    /logconflict := countconflict
    logconflict(\s, \r, term) | logconflict(t[term], action, term)
    if \s & \r then t[term] := s
  }
end
<<if possible, disambiguate [[s]] and [[r]] and return>>=
if \s & \r & 
   sprec  := \g.prec [term] & 
   rprec  := \g.prec [\r[1].cat.precterm] then {
  if      sprec > rprec then t[term] := s
  else if sprec < rprec then t[term] := r
  else case g.assoc[term] == g.assoc[r[1].cat.precterm] of {
    "left"  : t[term] := r
    "right" : t[term] := s
    "nonassoc" : t[term] := [&null, "error", 
       (if term ~== r[1].cat.precterm then term || " and " || r[1].cat.precterm || " are"
       else term || " is") || " not associative"]
    default : impossible("precedence")
  } | impossible("precedence mismatch")
  return
}
<<*>>=
procedure expectedtokens(t, g, I)
  local primarynts, ntterms, tterms
  primarynts := set()
  every it := !I & nt := it.cat.list[1 ~= it.dotpos] & member(g.nonterms, nt) do
    insert(primarynts, nt)
  if *primarynts = 0 then
    every it := !I & nt := it.cat.list[it.dotpos] & member(g.nonterms, nt) do
      insert(primarynts, nt)
  every ntterms | tterms := []
  every k := key(t) do
    put(if member(first[!primarynts], k) then ntterms else tterms, k)
  return if *primarynts > 0 then {
    every insert(primarynts, !tterms)
    s := " (" || truncalternates(ntterms, 5) || ")" | ""
    "expected " || truncalternates(primarynts) || s
  } else if *tterms > 0 then {
    "expected " || truncalternates(tterms, 5)
  } else {
    "no input is legal"
  }
end
<<*>>=
procedure truncalternates(l, size)
  /size := 3
  l := sort(l)
  return if *l > 0 then {
           if *l > size then l := put(l[1:size], "...")
           commafy(l, "or")
         }
end
<<*>>=
global srconflictcount, rrconflictcount
global reducedsigs

procedure resetconflicts()
  srconflictcount := rrconflictcount := 0
  reducedsigs := set()
end

procedure countconflict(sr, r, term)
  return if sr[2] == "shift" then srconflictcount +:= 1 else rrconflictcount +:= 1
end

procedure savereduce(item)
  return insert(\reducedsigs, image(item.cat) || item.nt)
end

procedure summarizeconflicts(outfile, g)
  writes(outfile, 0 < srconflictcount, " shift/reduce conflicts")
  if 0 < srconflictcount & 0 < rrconflictcount then writes(outfile, ", ")
  writes(outfile, 0 < rrconflictcount, " reduce/reduce conflicts")
  if 0 < srconflictcount | 0 < rrconflictcount then write(outfile)
  n := 0; 
  every cat := genrhs(g, lhs := key(g.nonterms)) &
        not member(reducedsigs, image(cat) || lhs) do 
    n +:= 1
  write(outfile, 0 < n, " rules never reduced")
  return
end
@
\subsection{Dumping diagnostics}
<<*>>=
global lrdiagconflicts
procedure loglrdiag(s, r, term)
  /lrdiagconflicts[term] := []
  put(lrdiagconflicts[term], [s, r])
  return
end
<<*>>=
procedure lrdiag(outfile, g)
  local reduced
  start_ticking(*itemsetlist, 50, "Dumping " || image(outfile)[6:-1] || "...")
  emitff(outfile, g)
  reduced := set()
  every i := 1 to *itemsetlist do {
    tick_to(i)
    if /lrdiagconflicts | *lrdiagconflicts > 0 then lrdiagconflicts := table()
    acl := actions(g, itemsetlist[i], loglrdiag)
    every l := !\lrdiagconflicts[tok := key(lrdiagconflicts)] & s := l[1] & r := l[2] do 
      {<<complain about conflict between [[s]] and [[r]] on [[tok]]>>}
    write(outfile, "state ", i)
    every write(outfile, "\t", itemimage(!itemsetlist[i]) | "")
    every ac := \acl[tok := 0 ~=== key(acl) | 0] do
      every write(outfile, "\t", (0 ~=== tok | ".")\1, "  ",
        A := (ac | (ac ~=== !!\lrdiagconflicts[tok])) & case A[2] of {
          "shift"  : "shift " || itemsetnos[A[3]]
          "reduce" : {insert(reduced, image(A[3].cat) || A[3].nt)
                      "reduce " || itemimage(A[3]) || " (" || A[3].uniqueid || ")"
                     }
          "error"  : "error (" || A[3] || ")"
          "accept" : {insert(reduced, image(A[1].cat) || A[1].nt)
                      "accept"
                     }
          default  : impossible("action type ", A[2])
        })
    write(outfile, "\t")
    every nt := key(gt := goto[itemsetlist[i]]) & member(g.nonterms, nt) do
      write(outfile, "\t", nt, "  goto ", itemsetnos[gt[nt]])
    write(outfile)
  }
  every cat := genrhs(g, lhs := key(g.nonterms)) &
        not member(reduced, image(cat) || lhs) do
    write(outfile, "Never reduced: ", lhs, " : ", commaseparate(cat.list, " "))
  write(&errout, " done")
  return
end
<<complain about conflict between [[s]] and [[r]] on [[tok]]>>=
write(outfile, i, ": ", s[2], "/", r[2], " conflict on ", string(tok) | ".")
every write(outfile, "\t", actiondiag(g, s|r, tok))
<<*>>=
procedure actiondiag(g, a, tok)
  case a[2] of {
    "shift"  : {pt := tok;               s := "shift "  || itemsetnos[a[3]]}
    "reduce" : {pt := a[3].cat.precterm; s := "reduce " || itemimage(a[3])}
  }
  return s || " (" || 
         (if \g.prec[\pt] then g.assoc[pt] || " " || g.prec[pt] else "no precedence") ||
         ")"
end
@
\subsection{Computing lookahead sets}
