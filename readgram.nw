\section{Reading in the grammar}
A grammar is a pairing of the names of nonterminal symbols with productions.
It's also necessary to know the output syntax of the terminals and the order in which
the nonterminals appear.
The grammar is embedded in a file that has a preamble and a postamble, which contain
lines that are copied to the output.
The preamble may
also contain [[
%term grammar-syntax output-syntax
%term syntax
%end output-syntax
]] to describe terminal symbols and output symbols.
If no output syntax is specified for a terminal, the syntax is null.
Quoted characters and strings that appear in the grammar are automatically
introduced as terminals.
<<*>>=
record grammar(nonterms, 	# map nonterminal symbol -> right-hand side
               terms, 		# map terminal symbol (name or string) to output syntax
               termtypes,	# map terminal symbol to type of tval (used in ML)
	       ntlist, 		# list of nonterminals in order of appearance
	       start, 		# start symbol
	       leaves, 		# set of terminals and nonterminals used in productions
	       preamble, 	# list of pass-throughs
	       postamble,	# list of pass-throughs
	       endsyntax,	# syntax for token to follow grammar
               externalnts,	# nonterminals for which external parsers are supplied
               prec,		# precedence of terminals
               assoc,		# associativity of terminals
               attributes)      # arbitrary attributes
@
Each production may either be a string (terminal or nonterminal), or a combination 
of strings using the four operators of EBNF: alternation ([[|]]), closure ([[{...}]]),
option ({\tt[...]}), and concatenation.
<<*>>=
record Alt(list)
record Clo(node)
record Opt(node)
record Cat(list, semantics, precterm, position)
			# precterm, if not null, defines precedence & associativity
			# position is source-code location
<<*>>=
procedure readgrammar(file)
  local lhs, rhs, preamble, postamble, ntlist, leaves, terms, nonterms, endsyntax,
        prec, assoc, nextprec, termtypes, termtype, t, att, attributes
  every preamble | postamble | ntlist := []
  every leaves | externalnts := set()	
  every terms | termtypes | nonterms | prec | assoc | attributes := table()
  endsyntax := "EOF"
  nextprec := 1
  <<read [[preamble]] from [[file]], adding to [[terms]] and [[termtypes]]>>
  <<read productions from [[file]], adding to [[nonterms]] and [[leaves]]>>
  while put(postamble, read(file))
  return grammar(nonterms, terms, termtypes, ntlist, start, leaves, preamble, postamble,
                 endsyntax, externalnts, prec, assoc, attributes)
end
@
<<read [[preamble]] from [[file]], adding to [[terms]] and [[termtypes]]>>=
lineno := 0
while lineno +:= 1 &
  thisline := read(file) ? 
    if ="%%" & pos(0) then
      break
    else if (="%term", white()) then {
      t := tab(upto(' \t') | 0)      
      <<add terminal [[t]] with default syntax and no type>>
      termtype := 3(optwhite(), ="(", tab(bal(')')), =")") | &null
      termtypes[t] := termtype
      if ="(" then error("syntax: %term gsyntax [(type)] [osyntax]")
      optwhite()
      pos(0) | (terms[t] := tab(upto(' \t') | 0))
      optwhite()
      pos(0) | error("syntax: %term gsyntax [(type)] [osyntax]")
    } else if ="%end " then
      endsyntax := tab(0)
    else if ="%start " then
      /start := tab(0) | error("start symbol already set")
    else if ="%external " then
      insert(externalnts, tab(0))
    else if ="#line " then
      (lineno := tab(many(&digits)) - 1, tab(many(' \t')), 
         pos(0) | (="\"", filename := tab(upto('"')), ="\"", pos(0)),
       put(preamble, resynch(filename, lineno))
      )
    else if ="%" & ass := =("left"|"right"|"nonassoc") & tab(many(' \t')) then
      {<<new precedence class>>}
    else if ="%attribute " then {
      att := tab(upto(' ') | 0)
      /attributes[att] := []
      put(attributes[att], tab(0))
    } else
      put(preamble, tab(0))
<<add terminal [[t]] with default syntax and no type>>=
if member(terms, t) then error(t, " is already a terminal symbol")
if \nonterms[t] then error(t, " is already a nonterminal symbol")
terms[t] := termtypes[t] := &null
<<new precedence class>>=
while case scantokens() of {
  IDENT : {
    if not member(terms, tval) then {
      t := tval; <<add terminal [[t]] with default syntax and no type>>
    }
    prec[tval] := nextprec;
    assoc[tval] := ass;
  }
  "\"" | "'" : {
    if not member(terms, image(tval)) then {
      t := image(tval); <<add terminal [[t]] with default syntax and no type>>
    }
    prec[image(tval)] := nextprec;
    assoc[image(tval)] := ass;
  }
  default : error("identifier or terminal literal expected")
}
nextprec +:= 1
<<*>>=
record resynch(filename, lineno)
@
<<read productions from [[file]], adding to [[nonterms]] and [[leaves]]>>=
lex(file)
while not (token == ("%%" | EOF)) do {
  lhs := Ident()
  expect(":")
  if member(terms, lhs) then error(lhs, " is already a terminal symbol")
  /start := lhs
  if /nonterms[lhs] then put(ntlist, lhs)	# maintain list of lhs
  nonterms[lhs] := Alternate(nonterms[lhs], parserhs(leaves, terms))
  expect(";")
}
<<*>>=
link ebnfint #
@ 
\subsection{The nature of productions}
@
Because it's done in more than one place, we provide the procedure 
[[Alternate]] to combine nodes by alternation:
<<*>>=
procedure Alternate(p1, p2)
  if /p1 then return p2
  else if type(p1) == type(p2) == "Alt" then return Alt(p1.list|||p2.list)
  else if type(p1) == "Alt"             then put(p1.list, p2) & return p1
  else if type(p2) == "Alt"             then put(p2.list, p1) & return p2
  else return Alt([p1, p2])
end
@
Parsing is straightforward; concatenation has higher precedence than alternation.
<<*>>=
procedure parserhs(leaves, terms)
  p := parsealt(leaves, terms)
  while gobble("|") do
    p := Alternate(p, parsealt(leaves, terms))
  return p
end

procedure parsealt(leaves, terms)
  local precterm
  static matcher
  initial { <<make [[matcher]] match brackets>> }
  l := []
  repeat {
    if x := gobble(!"[({") then {
      node := parserhs(leaves, terms)
      gobble(matcher[x]) | error("unmatched " || x)
      put(l, case x of { 
               "(" : node 
               "[" : Opt(node)
               "{" : Clo(node) 
          })
    } else case token of {
       "%"  : {lex()
               <<eat [["prec"]]>>
               case token of {
                 IDENT : if member(terms, tval) then precterm := tval 
                         else error(image(tval), " is not a terminal symbol")
                 "\"" | "'" : precterm := image(tval)
                 default : error("expected terminal symbol (or literal)")
               }
               lex()
              }
       "$" | "$$"  : {
                ot := token; lex(); s := tval; expect(IDENT)
                if ot == "$$" then s := allargs(s)
                return Cat(l, s, precterm, lineno || " " || image(filename))
               }
       STARTSEM : {<<parse semantics and return [[Cat]] node of [[l]]>>}
       !"]})|;" : return if *l = 1 & /precterm then l[1] 
                         else Cat(l, &null, precterm, lineno || " " || image(filename))
       IDENT    : {insert(leaves, tval)
                   put(l, tval)
                   if member(terms, tval) then precterm := tval
                   lex()
                  }
       "\"" | "'" : {insert(leaves, image(tval))
                     put(l, image(tval))
		     precterm := image(tval)
                     lex()
                    }
       default : error("expected identifier, literal terminal, or punctuation")
    }
  }
end
<<parse semantics and return [[Cat]] node of [[l]]>>=
s := []
p := lineno || " " || image(filename)
lex()
while put(s, token == SEMANTICS & .tval) do lex()
expect(ENDSEM)
token == !"]})|;" | 
   error("expected closing bracket, bar, or semicolon after semantics")
return Cat(l, s, precterm, p)
<<make [[matcher]] match brackets>>=
matcher := table()
matcher["["] := "]" ; matcher["("] := ")"; matcher["{"] := "}"
<<eat [["prec"]]>>=
if token == IDENT & tval == "prec" then
  lex()
else
  error("%prec expected")
@
\subsection{Setting defaults for parts of the grammar}
\subsection{Miscellany}
<<*>>=
procedure split(line)
  static meta, white, quote, nonmeta
  initial {
    white := ' \t'
    meta := '(){}[]|'
    quote := '"\''
    nonmeta := &ascii -- (white ++ meta ++ quote)
  }
  l := []
  line ? {
    tab(many(white))
    while not pos(0) do {
      if put(l, tab(any(meta))) then &null
      else if delim := tab(any('"\'')) then
        put(l, delim || tab(find(delim)+1)) | error("unclosed " || delim)
      else if put(l, tab(many(nonmeta))) then &null
      else error("this can't happen in scanning")
      tab(many(white))
    }
  }
  return l
end
<<*>>=
procedure white()
  suspend tab(many(' \t'))
end

procedure optwhite()
  suspend white() | ""
end
