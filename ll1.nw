% -*- mode: Noweb; noweb-code-mode: icon-mode -*-

\section{Generating an LL(1) parser}
<<*>>=
global epsilon, epsilonset, endmarker, debugging, emitnt

procedure ll1(g, argv, emitter)
  epsilon     := " %Epsilon% "
  endmarker   := "end of file"
  epsilonset  := set([epsilon])
  ntlist      := g.ntlist		# nonterms in order of appearance
  while case argv[1] of {
    "-d" : debugging := "-d"
    "-w" : weak := "-w"
    "-s" : ntlist := sort(ntlist)
    default : &fail
  } do get(argv)
  while argv[1][1] == "-" do write(&errout, "Ignoring ", get(argv))
  checkgrammar(g)
  if /weak then
    every lhs := key(g.nonterms) do 
      g.nonterms[lhs] := Alternate(g.nonterms[lhs], Alt([]))
  compute_first(g)
  compute_follow(g)
  if \debugging then { emitff(&errout, g); emitpredict(g) }
  showconflicts(g)
  emitter("preamble")(g)
  emitcode(g, ntlist, emitter("emit"))
  emitter("postamble")(g)
end
@ 
<<*>>=
procedure emit_amble(amble, synch)
  every l := !amble do case type(l) of {
    "string" : write(l)
    "resynch" : synch(l)
    default : impossible("type of ", type(l), " in preamble or postanble")
  }
  return
end

procedure default_emit_preamble(g, emitter)
  return emit_amble(g.preamble, (\emitter)("resynch") | default_resynch)
end

procedure default_emit_postamble(g, emitter)
  return emit_amble(g.postamble, (\emitter)("resynch") | default_resynch)
end
@
\subsection{First and follow sets}
Computing first and follow sets uses iterative algorithms that repeatedly 
add to sets.  Adding to a set usually means another iteration has to be done if the
set changes.  [[addset]] adds to a set, succeeding only if the set
actually changes.
<<*>>=
procedure addset(old, new)
  n := *old
  every insert(old, !new)
  return *old > n
end
@
FIRST is computed bottom-up, which means that every time the FIRST set
of a nonterminal changes, we have to check every tree all over again.
[[first_tree]] computes the FIRST sets of all grammar nodes in a tree; 
if the FIRST set of a root node changes, we have to iterate.

The base cases are that the FIRST set of a terminal is the terminal itself
and the inital FIRST set of a nonterminal is empty.
[[first_tree]] initializes other FIRST sets to be empty.
<<*>>=
global first
procedure compute_first(g)
  local changes, x, p
  first := table()
  every first[t:= key(g.terms)] := set([t])
  every first[key(g.nonterms)] := set()
  changes := 1
  while \changes do {
    changes := &null
    every lhs := key(g.nonterms) do
      changes := addset(first[lhs], first_tree(g.nonterms[lhs]))
  }
end
@
An operation used in computing both FIRST and FOLLOW sets
is finding the FIRST set of a list of concatenated nodes.
The FIRST set of the first node is used, and we continue if the
FIRST node can produce [[epsilon]].
If the entire string can produce [[epsilon]], [[tail]] is added.
[[tail]] defaults to [[epsilonset]].
<<*>>=
procedure first_list(l, tail)
  if *l = 0 then 
    return \tail | epsilonset
  else if member(first[l[1]], epsilon) then 
    return (first[l[1]] -- epsilonset) ++ first_list(l[2:0], tail)
  else
    return first[l[1]]
end
@
FIRST sets are computed bottom-up.
<<*>>=
procedure first_tree(node)
  case type(node) of {
    "Cat" | "Alt" : every first_tree(!node.list)
    "Clo" | "Opt" : first_tree(node.node)
  }
  /first[node] := set()
  case type(node) of {
    "string"      : &null
    "Cat"         :       addset(first[node], first_list(node.list))
    "Alt"         : every addset(first[node], first[!node.list])
    "Clo" | "Opt" :       addset(first[node], first[node.node] ++ epsilonset)
    default       : error("unknown node type")
  }
  return first[node]
end
@
FOLLOW sets are computed top-down, so it's a simple matter to put every changed
nonterminal on a work list.
<<*>>=
global start, follow, tofollow
procedure compute_follow(g)
  local empty
  follow := table()
  empty := set()
  tofollow := []
  follow_tree(g, g.start, set([endmarker]))
  every follow_tree(g, !g.nonterms | key(g.nonterms), empty)
  while follow_tree(g, get(tofollow), get(tofollow))
end

procedure follow_tree(g, node, new)
  local change
  change := &null
  change := /follow[node] := set()
  change := addset(follow[node], new)
  if \change then
    case type(node) of {
      "string" : if \g.nonterms[node] then every put(tofollow, g.nonterms[node] | new)
      "Cat"    : {
        every i := 1 to *node.list - 1 do
          follow_tree(g, node.list[i], first_list(node.list[i+1:0], follow[node]))
        follow_tree(g, node.list[*node.list], new)
      }
      "Alt"   : every follow_tree(g, !node.list, new)
      "Opt"   : follow_tree(g, node.node, new)
      "Clo"   : follow_tree(g, node.node, new ++ first[node.node])
      default : error("unknown node type")
    }
  return
end
@
\subsection{Emitting code}
It's easier to show first how to emit code, then later to show
how to check for conflicts.

When predicting for a node, we combine the node's FIRST set with the
parent's FOLLOW set.  The parent of a root node is a left-hand side.
<<*>>=
procedure predict(node, parent)
  return first_list([node], follow[parent])
end
<<*>>=
procedure emitcode(g, ntlist, emitter)
  g.terms[endmarker] := g.endsyntax
  every nt := !ntlist & not member(g.externalnts, nt) do
    emitter(g, nt)
  delete(g.terms, endmarker)
end
@
\subsection{Diagnostics}
<<*>>=
procedure emitpredict(g)
  write(&errout, "PREDICT Sets:")
  write(&errout)
  every nt := !sort(g.nonterms) do
    if type(nt[2]) == "Alt" then every showpredict(nt[1], !nt[2].list)
    else showpredict(nt[1], nt[2])
end

procedure showpredict(lhs, node)
  write(&errout, prodimage(lhs, node))
  every write(&errout, "\t", !sort(predict(node, lhs)))
  write(&errout)
end
<<*>>=
procedure emitff(outfile, g)
  every l := (!sort(g.nonterms))[1] do {
    write(outfile, l)
    write(outfile, "\tFIRST")
    every write(outfile, "\t\t", !sort(first[l]))
    write(outfile, "\tFOLLOW")
    every write(outfile, "\t\t", !sort(follow[l]))
    write(outfile)
  }
end
<<*>>=
procedure showconflicts(g)
  local p1, p2, nt, i1, i2, overlap, count

  count := 0
  every nt := !sort(g.nonterms) do
    count +:= conflicts(nt[2], nt[1])
  if count > 0 then 
    if \die_on_conflicts then
      error(count, " conflicts.")
    else
      write(&errout, count, " conflicts.")
  else if \debugging then
    write(&errout, "Grammar is OK")
end
@
<<*>>=
procedure conflicts(node, lhs)
  local ambiguous
  n := 0
  case type(node) of {
    "Alt" : {
      p := []
      every put(p, predict(!node.list, node))
      if *(ambiguous := p[i := 1 to *p] ** p[j := i+1 to *p]) > 0 & n +:= 1 then 
        {<<report inability to predict alternative>>}
      every n +:= conflicts(!node.list, lhs)
    }
    "Opt" | "Clo" : {
      if *(ambiguous := predict(node.node, node) ** follow[node]) > 0 & n +:= 1 then {
        write(&errout, lhs, ": can't decide whether to take ", nodeimage(node))
        writes(&errout, "  on seeing tokens:")       
        every writes(&errout, " ", !ambiguous)
        write(&errout)
      }
      n +:= conflicts(node.node, lhs)
    }
    "Cat"    : every n +:= conflicts(!node.list, lhs)
    "string" : &null
    default  : error("this can't happen -- error node type")
  }
  return n
end
<<report inability to predict alternative>>=
write(&errout, lhs, ": can't predict alternatives")
write(&errout, lhs, ": ambiguous tokens are:")
every write(&errout, repl(" ", *lhs), "     ", !ambiguous)
write(&errout, lhs, ": and they appear in")
every q := !node.list & member(predict(q, node), !ambiguous) do
  write(&errout, repl(" ", *lhs), "    ", nodeimage(q))
@ 
